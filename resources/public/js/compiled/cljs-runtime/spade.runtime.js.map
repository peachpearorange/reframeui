{"version":3,"sources":["spade/runtime.cljs"],"mappings":";AAKA,GAAA,QAAAA,kCAAAC,0CAAAC;AAAA;AAAA,AAAA,AAGEC,qCAAW,6CAAA,7CAACC;;AAEd,GAAA,QAAAJ,kCAAAC,0CAAAI;AAAA;AAAA,AAAA,8CAAA,2CAAA,zFAAmBC,gKACDC;;AAElB,6BAAA,7BAAMC,kEAAWC;AAAjB,AACE,qCAAA,9BAACC,oCAAoBD;;AAEvB,4BAAA,5BAAME,gEAAaC;AAAnB,AACE,OAACC,uGAAWP,4CAAoBM;;AAElC,qCAAA,rCAAOE,kFAAiBC,IAAIC;AAA5B,AACE,QAAM,AAAa,AAAA,yFAAUD,iBAAMC;;AAErC,6BAAA,7BAAMC,kEAASC,GAAGF;AAAlB,AACE,OAACG,mDAAMhB,mCAAWiB,iBAAOF,GAClB,6DAA2BH;AAA3B,AACE,GAAU,AAACM,6CAAE,AAAA,uFAASN,KAAKC;AAA3B;AAAA,AACE,AAACF,mCAAgBC,IAAIC;;;AACvB,yDAAA,lDAACM,8CAAMP,6DAAYC;;;AAE9B,6BAAA,7BAAMO,kEAASL,GAAGF;AAAlB,AACE,IAAMQ,OAAK,AAAQC;IACbC,UAAQ,iBAAAC,WAAM,uBAAA,vBAACC;AAAP,AAAA,AAAAD,sBAAA,WAC4B,4CAAKT;;AADjCS;;UADd,2CAAA,mEAAA,6DAAA,jLAGMZ,4GAAcW,iEACDV,sDACJE;AALf,AAME,GAAQ,GAAA,SAAA,RAAOM;AAAf;AAAA,AAAA,MAAA,KAAAK,MAAA,CAAA,kBAAA,8DAAA,KAAA;;;AAGA,AAAcL,iBAAKE;;AAEnB,AAACP,mDAAMhB,mCAAW2B,gBAAMZ,GAAGH;;AAC3B,OAACD,mCAAgBC,IAAIC;;AAEzB,8BAAA,sCAAAe,pEAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAuBI;eAAvB,AAAAF,4CAAAF,eAAA,tEAAwCK;AAAxC,AACE,GAAA,AAAAC,cAAQD;AACND;;AACA,yDAAA,lDAACG,sDAKW,AAACG,4CAAI,WAAKC;AAAL,AACE,GACE,OAASA;AAAMA;;AADjB,GAIE,EAAK,AAACC,qBAAKD,WACN,OAAS,AAAA,sFAAQA;AACtB,OAAA,sFAAQA;;AANV,AASE,MAAO,KAAAd,MACE,CAAA,iFACKc;;;;GAfvB,oGAAA,lGAAI,AAACH,qBAAKH,WACR,AAACI,6CAAKJ,SAASD,+FACdC,SAASD;;;AAe5B,mCAAA,nCAAMS,8EAAeC,KAAKC,gBAAgBC,QAAQC;AAAlD,AACE,IAAAC,aAA2C,AAACE,8CAAMJ,QAAQD,gBAAgBE,OAAOA;IAAjFC,iBAAA,AAAAjB,4BAAAiB;WAAAA,PAAqCC;UAArC,AAAAjB,4CAAAgB,eAAA,jEAAOlC;iBAAP,AAAAkB,4CAAAgB,eAAA,xEAAgBd;IACViB,WAAS,4CAAA,AAAAC,5CAACpB,4DAAK/B,oCAAWiC;AADhC,AAGE,oBAAIiB;AAEF,AAACpC,2BAAQmB,WAAWpB;;AAGpB,AAACO,2BAAQa,WAAWpB;;;AAEtB,IAAAuC,WAAMT;IAANS,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,wDACiB,AAACpB,4BAAcgB;;;KADhC;KAAA;AAEsB,OAAChB,4BAAcgB;;;KAFrC;AAGUnC;;;;AAHV,MAAA,KAAAa,MAAA,CAAA,mEAAA0B","names":["js/spade","js/spade.runtime","js/spade.runtime.*injected*","spade.runtime/*injected*","cljs.core.atom","js/spade.runtime.*css-compile-flags*","spade.runtime/*css-compile-flags*","js/goog.DEBUG","spade.runtime/->css-var","n","garden.types/->CSSFunction","spade.runtime/compile-css","elements","garden.core.css","spade.runtime/perform-update!","obj","css","spade.runtime/update!","id","cljs.core.swap_BANG_","cljs.core/update","cljs.core._EQ_","cljs.core.assoc","spade.runtime/inject!","head","js/document","element","G__55900","js/document.createElement","js/Error","cljs.core/assoc","p__55902","map__55903","cljs.core/--destructure-map","cljs.core.get","spade.runtime/compose-names","style-name","composed","cljs.core/not","clojure.string.join","cljs.core/seq?","cljs.core.into","cljs.core.map","item","cljs.core/map?","spade.runtime/ensure-style!","mode","base-style-name","factory","params","map__55904","info","cljs.core.apply","existing","cljs.core/deref","G__55905","cljs.core/Keyword"],"sourcesContent":["(ns spade.runtime\n  (:require [clojure.string :as str]\n            [garden.core :as garden]\n            [garden.types :refer [->CSSFunction]]))\n\n(defonce\n  ^{:private true\n    :dynamic true}\n  *injected* (atom {}))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? goog.DEBUG})\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- perform-update! [obj css]\n  (set! (.-innerHTML (:element obj)) css))\n\n(defn update! [id css]\n  (swap! *injected* update id\n         (fn update-injected-style [obj]\n           (when-not (= (:source obj) css)\n             (perform-update! obj css))\n           (assoc obj :source css))))\n\n(defn inject! [id css]\n  (let [head (.-head js/document)\n        element (doto (js/document.createElement \"style\")\n                  (.setAttribute \"spade-id\" (str id)))\n        obj {:element element\n             :source css\n             :id id}]\n    (assert (some? head)\n            \"An head element is required in the dom to inject the style.\")\n\n    (.appendChild head element)\n\n    (swap! *injected* assoc id obj)\n    (perform-update! obj css)))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n    (str/join \" \"\n              (->>\n                (if (seq? composed)\n                  (into composed style-name)\n                  [composed style-name])\n                (map (fn [item]\n                       (cond\n                         (string? item) item\n\n                         ; unpack a defattrs\n                         (and (map? item)\n                              (string? (:class item)))\n                         (:class item)\n\n                         :else\n                         (throw (js/Error.\n                                  (str \"Invalid argument to :composes key:\"\n                                       item))))))))))\n\n(defn ensure-style! [mode base-style-name factory params]\n  (let [{css :css style-name :name :as info} (apply factory base-style-name params params)\n        existing (get @*injected* style-name)]\n\n    (if existing\n      ; update existing style element\n      (update! style-name css)\n\n      ; create a new element\n      (inject! style-name css))\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))\n"]}